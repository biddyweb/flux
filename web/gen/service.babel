var ServiceList = React.createClass({
  render: function() {
    var serviceNodes = this.state.services.map(function(service) {
      return (<li key={service.name} className="">
              <ServiceView service={service}/>
              </li>);
    });
    return (
        <ul className="serviceList">
        {serviceNodes}
      </ul>
    );
  },
  getInitialState() {
    return {services: []};
  },
  refreshData: function() {
    $.ajax('/api/', {
      dataType: 'json',
      success: function(services) {
        if (this.isMounted()) {
          this.setState({services: services});
          setTimeout(this.refreshData, 10000);
        }
      }.bind(this)
    });
  },
  componentDidMount: function() {
    this.refreshData();
  }
});

var ServiceView = React.createClass({
  getInitialState: function() {
    return {fields: ['docker.io/tag'], instances: []};
  },

  refreshData: function() {
    $.ajax('/api/'+this.props.service.name+'/', {
      dataType: 'json',
      success: function(service) {
        if (this.isMounted()) {
          this.setState({instances: service.children});
          setTimeout(this.refreshData, 10000);
        }
      }.bind(this)
    });
  },

  componentDidMount: function() {
    this.refreshData();
  },

  render: function() {
    var grouper = (<span>Grouped by {this.state.fields.join(', ')}</span>);
    var list = (<GroupList instances={this.state.instances} fields={this.state.fields}/>);
    return (
        <div className="serviceView">
          <div>
            <strong>
              {this.props.service.name}
              {this.props.service.details.address}:{this.props.service.details.port}
              ({this.state.instances.length} instances)</strong>
            <p>Grouped by <strong>{grouper}</strong></p>
          </div>
          {list}
        </div>
    );
  }
});

function zip(as, bs, fn) {
  var len = Math.min(as.length, bs.length);
  var res = new Array(len);
  for (var i=0; i<len; i++) {
    res[i] = fn(as[i], bs[i]);
  }
  return res;
}

// Return an object with just the fields given
function project(object, fields) {
  var result = {};
  fields.forEach(function(f) {
    result[f] = object[f];
  });
  return result;
}

// Group the instances given by the values of the labels given,
// e.g., by tag.
function groupInstancesBy(instances, labels) {
  var result = {};
  instances.forEach(function(instance) {
    var key = JSON.stringify(project(instance.details.labels, labels));
    if (result[key] === undefined) {
      result[key] = [instance];
    }
    else {
      result[key].push(instance);
    }
  });
  return result;
}

var GroupList = React.createClass({
  render: function() {
    var groups = groupInstancesBy(this.props.instances, this.props.fields);
    var items = [];
    for (var g in groups) {
      items.push(<li key={g}><GroupView name={g} instances={groups[g]}/></li>)
    }
    return (<ul>{items}</ul>);
  },
});

function instanceName(instance) {
  return instance.name;
}

var GroupView = React.createClass({
  render: function() {
    return (
        <div className="groupView">
          <strong>{this.props.name} ({this.props.instances.length} instances)</strong>
          <RateChart spec={{individual: this.props.instances.map(instanceName)}}/>
        </div>);
  },
});

var InstanceList = React.createClass({
  getInitialState: function() {
    return {data: []}
  },
  refreshData: function() {
    $.ajax('/api/'+this.props.service+'/', {
      dataType: 'json',
      success: function(service) {
        if (this.isMounted()) {
          this.setState({data: service.children});
          setTimeout(this.refreshData, intervalSecs * 1000);
        }
      }.bind(this)
    });
  },
  componentDidMount: function() {
    this.refreshData();
  },
  render: function() {
    var instanceNodes = this.state.data.map(function(i) {
      return (<li key={i.name}><InstanceView instance={i}/></li>)
    });
    return (<ul>
            {instanceNodes}
            </ul>);
  }
});


function renderChart(chart) {
  chart.graph.render();
  chart.yAxis.render();
  chart.xAxis.render();
}

// Turn a specification into a Prometheus label match expression
function matchExpr(spec) {
  var labels = [];
  for (var k in spec) {
    var eq = '=';
    var val = spec[k];
    if (Array.isArray(val)) {
      eq = "=~";
      val = val.join("|");
    }
    labels.push(k + eq + '"' + val + '"');
  }
  return labels.join(",");
}

function statsURL(spec, start, end) {
  var query = 'query=sum(rate(ambergreen_http_total{'+matchExpr(spec)+'}['+intervalSecs+'s])) by (code)';
  var interval = '&step='+intervalSecs+'s&start='+start+'&end='+end;
  return '/stats/api/v1/query_range?'+query+interval;
}

var intervalSecs = 10;

var RateChart = React.createClass({
  render: function() {
    return (<div>
              <div className="yAxis" ref="chartY"/>
              <div className="chart" ref="chart"/>
              <div className="legend" ref="legend"/>
            </div>)
  },
  getData: function(start, end, k) {
    $.ajax(statsURL(this.props.spec, start, end), {
      success: function(json) {
        var result = json.data.result;
        var okData = [], errData = [];
        for (var i=0; i < result.length; i++) {
          switch (result[i].metric.code) {
          case "200":
            okData = result[i].values;
            break;
          case "500":
            errData = result[i].values;
            break
          }
        }
        k(okData, errData);
      }.bind(this)
    });
  },
  stepChart: function step(chart, lastNow) {
    var now = +new Date() / 1000;
    this.getData(lastNow, now, function(okData, errData) {
      if (this.isMounted()) {
        var nextNow = lastNow;
        var data = zip(okData, errData, function(ok, err) {
          return [{OK: Number(ok[1]), Error: Number(err[1])}, ok[0]];
        });
        data.forEach(function(datum) {
          if (datum[1] > lastNow) {
            chart.series.addData.apply(chart.series, datum);
            nextNow = datum[1];
          }
        });
        renderChart(chart);
        setTimeout(step.bind(this, chart, nextNow), intervalSecs * 1000);
      }
    }.bind(this));
  },
  componentDidMount: function() {
    var end = +new Date() / 1000;
    var start = end - 300;
    this.getData(start, end, function(okData, errData) {
      var base = start;
      function toXY(xy) {
        return {x: xy[0], y: Number(xy[1])};
      }
      var div = React.findDOMNode(this.refs.chart);
      var lines = [{name: 'OK', color: 'blue', data: okData.map(toXY)},
                   {name: 'Error', color: 'red', data: errData.map(toXY)}];
      var series = new Rickshaw.Series.FixedDuration(
        lines, undefined /*palette*/,
        {timeInterval: intervalSecs * 1000,
         maxDataPoints: 300 / intervalSecs,
	 timeBase: base});
      var graph = new Rickshaw.Graph({
        element: div,
        renderer: 'line',
        interpolation: 'linear',
        series: series,
        width: 500,
        height: 100,
      });

      var xAxis = new Rickshaw.Graph.Axis.Time({
        graph: graph,
      });
      var yAxis = new Rickshaw.Graph.Axis.Y({
        graph: graph,
        orientation: 'left',
        height: 100,
        ticks: 5,
        element: React.findDOMNode(this.refs.chartY)
      });

      var legend = new Rickshaw.Graph.Legend({
        element: React.findDOMNode(this.refs.legend),
        graph: graph
      });

      var chart = {graph: graph, series: series, yAxis: yAxis, xAxis: xAxis};
      renderChart(chart);
      this.stepChart(chart, end);
    }.bind(this));
  }
});

var InstanceView = React.createClass({
  render: function() {
    return (<div className="instanceView">
              <div>{this.props.instance.details.address}:{this.props.instance.details.port}
                ({maybeTruncate(this.props.instance.name)};
                 {labels(this.props.instance.details.labels)})
              </div>
              <RateChart spec={{individual: this.props.instance.name}}/>
            </div>)
  }
});

function labels(kv) {
  var s = [];
  for (var k in kv) {
    s.push(k + "=" + kv[k]);
  }
  return s.join(", ");
}

function maybeTruncate(id) {
  if (id.length > 12) {
    return id.substr(0, 12) + '...';
  }
  return id;
}
